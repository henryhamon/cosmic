<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-32) 2015.2.1 (Build 705U)" ts="2016-12-16 17:25:01">


<Class name="COSmic.config.Installer">
<Super>%Projection.AbstractProjection</Super>
<TimeChanged>64195,49950.789254</TimeChanged>
<TimeCreated>64195,49887.157832</TimeCreated>

<Parameter name="DispatchClass">
<Default>COSmic.web.Broker</Default>
</Parameter>

<Parameter name="Application">
<Default>cosmic</Default>
</Parameter>

<Projection name="Reference">
<Type>Installer</Type>
</Projection>

<Method name="CreateProjection">
<Description>
This method is invoked when a class is compiled.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[cls:%String,&params]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set ns = $Namespace
    ZNSpace:ns'="%SYS" "%SYS"
    Do ##class(Security.System).GetInstallationSecuritySetting(.security)
    If (security="None") {
        Set cspProperties("AutheEnabled") = 64 // Unauthenticated
    } Else {
        Set cspProperties("AutheEnabled") = 32 // Password
    }
    Set cspProperties("NameSpace") = ns
    Set cspProperties("Description") = "Aplicação WEB para o sistema RESTful LINX PMR."
    Set cspProperties("IsNameSpaceDefault") = 1
    Set cspProperties("DispatchClass") = ..#DispatchClass
    If ('##class(Security.Applications).Exists("/" _ ..#Application)) {
        Write !, "Criando a Aplicação Web ""/"""_ ..#Application _"..."
        Set tSC = ##class(Security.Applications).Create("/" _ ..#Application, .cspProperties)
        If $$$ISERR(tSC) Throw ##class(%Installer.Exception).CreateFromStatus(tSC)
        Write !, "Aplicação Web ""/"_ ..#Application _""" criada com sucesso."
    } Else {
        Write !, "Aplicação Web ""/"_ ..#Application _""" já existe, e está pronta para uso."
    }
    ZNSpace:ns'="%SYS" ns
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="RemoveProjection">
<Description>
This method is invoked when a class is 'uncompiled'.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[cls:%String,&params,recompile:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set ns = $Namespace
    ZNSpace:ns'="%SYS" "%SYS"
    If (##class(Security.Applications).Exists("/" _ ..#Application)) {
        Write !, "Removendo a aplicação Web ""/"_ ..#Application _"""..."
        Do ##class(Security.Applications).Delete("/" _ ..#Application)
        Write !, "Aplicação Web ""/"_ ..#Application _""" foi removida com sucesso."
    }
    ZNSpace:ns'="%SYS" ns
    Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="COSmic.info.swagger">
<TimeChanged>64268,58333.608353</TimeChanged>
<TimeCreated>64268,58333.608353</TimeCreated>

<Method name="v1">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Write $Replace("	{"_
	"		'swagger': '2.0',"_
	"		'info': {"_
	"			'version': '0.1.0',"_
	"			'title': 'COSmic'"_
	"		},"_
	"		'paths': {"_
	"			'/namespaces': {"_
	"				'get': {"_
	"					'description': 'Gets All `Namespaces` names.\nOptional query param of **size** determines\nsize of returned array\n',"_
	"					'parameters': ["_
	"						{"_
	"							'name': 'size',"_
	"							'in': 'query',"_
	"							'description': 'Size of array',"_
	"							'required': true,"_
	"							'type': 'number',"_
	"							'format': 'double'"_
	"						}"_
	"					],"_
	"					'responses': {"_
	"						'200': {"_
	"							'description': 'Successful response',"_
	"							'schema': {"_
	"								'title': 'ArrayOfNamespaces',"_
	"								'type': 'array',"_
	"								'items': {"_
	"									'title': 'Namespace',"_
	"									'type': 'string'"_
	"								}"_
	"							}"_
	"						}"_
	"					}"_
	"				}"_
	"			},"_
	"			'/{NameSpace}/class': {"_
	"				'get': {"_
	"					'description': 'List all classes on a NameSpace',"_
	"					'parameters': ["_
	"						{"_
	"							'name': 'NameSpace',"_
	"							'in': 'path',"_
	"							'description': '',"_
	"							'required': true,"_
	"							'type': 'string'"_
	"						}"_
	"					],"_
	"					'responses': {"_
	"						'200': {"_
	"							'description': 'Successful response',"_
	"							'schema': {"_
	"								'title': 'ArrayOfClassNames',"_
	"								'type': 'array',"_
	"								'items': {"_
	"									'title': 'Class Name',"_
	"									'type': 'string'"_
	"								}"_
	"							}"_
	"						}"_
	"					}"_
	"				},"_
	"				'post': {"_
	"					'description': 'Create a new Class',"_
	"					'parameters': ["_
	"						{"_
	"							'name': 'NameSpace',"_
	"							'in': 'path',"_
	"							'description': '',"_
	"							'required': true,"_
	"							'type': 'string'"_
	"						}"_
	"					],"_
	"					'responses': {"_
	"						'200': {"_
	"							'description': 'Successful response'"_
	"						}"_
	"					}"_
	"				}"_
	"			},"_
	"			'/{NameSpace}/class/{ClassName}': {"_
	"				'get': {"_
	"					'description': 'Get the class source',"_
	"					'parameters': ["_
	"						{"_
	"							'name': 'NameSpace',"_
	"							'in': 'path',"_
	"							'description': '',"_
	"							'required': true,"_
	"							'type': 'string'"_
	"						},"_
	"						{"_
	"							'name': 'ClassName',"_
	"							'in': 'path',"_
	"							'description': '',"_
	"							'required': true,"_
	"							'type': 'string'"_
	"						}"_
	"					],"_
	"					'responses': {"_
	"						'200': {"_
	"							'description': 'Successful response',"_
	"							'schema': {"_
	"								'title': 'Source',"_
	"								'type': 'string'"_
	"							}"_
	"						}"_
	"					}"_
	"				},"_
	"				'put': {"_
	"					'description': 'Save the Class',"_
	"					'parameters': ["_
	"						{"_
	"							'name': 'Namespace',"_
	"							'in': 'query',"_
	"							'description': 'The Namespace',"_
	"							'required': true,"_
	"							'type': 'string'"_
	"						},"_
	"						{"_
	"							'name': 'ClassName',"_
	"							'in': 'path',"_
	"							'description': '',"_
	"							'required': true,"_
	"							'type': 'string'"_
	"						}"_
	"					],"_
	"					'responses': {"_
	"						'200': {"_
	"							'description': 'Successful response'"_
	"						}"_
	"					}"_
	"				},"_
	"				'post': {"_
	"					'description': 'Compile Class',"_
	"					'parameters': ["_
	"						{"_
	"							'name': 'Namespace',"_
	"							'in': 'query',"_
	"							'description': 'The Namespace',"_
	"							'required': true,"_
	"							'type': 'string'"_
	"						},"_
	"						{"_
	"							'name': 'ClassName',"_
	"							'in': 'path',"_
	"							'description': '',"_
	"							'required': true,"_
	"							'type': 'string'"_
	"						}"_
	"					],"_
	"					'responses': {"_
	"						'200': {"_
	"							'description': 'Successful response'"_
	"						}"_
	"					}"_
	"				},"_
	"				'delete': {"_
	"					'description': 'Delete Class',"_
	"					'parameters': ["_
	"						{"_
	"							'name': 'Namespace',"_
	"							'in': 'query',"_
	"							'description': 'The Namespace',"_
	"							'required': true,"_
	"							'type': 'string'"_
	"						},"_
	"						{"_
	"							'name': 'ClassName',"_
	"							'in': 'path',"_
	"							'description': '',"_
	"							'required': true,"_
	"							'type': 'string'"_
	"						}"_
	"					],"_
	"					'responses': {"_
	"						'200': {"_
	"							'description': 'Successful response'"_
	"						}"_
	"					}"_
	"				}"_
	"			}"_
	"		}"_
	" } ","'","""")
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="COSmic.v1.app.class">
<TimeChanged>64268,61810.55676</TimeChanged>
<TimeCreated>64267,33711.631208</TimeCreated>

<Method name="BareName">
<Description>
return classname without extension .cls</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    Quit $Replace(ClassName,".cls","")
]]></Implementation>
</Method>

<Method name="All">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String,*pClassNames</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK, 
		ns = $Namespace, 
		sql = ##class(COSmic.v1.utl.SQLBuilder).%New()
		
	Set tSC = $$$OK
	Try {
	    Set $Namespace = pNamespace
	    Set tRS = sql.From("%Dictionary.ClassDefinition"
	    	).Where("NOT id %STARTSWITH '%'"
	    	).And("system <> 4").Execute(.tSC)
	    
	    Throw:$$$ISERR(tSC)
	    
	    While tRS.%Next() {
	        Set $List(list,*+1) = "{""Name"":"""_..BareName(tRS.%Get("Name"))_ """}"
	    }
	    Set pClassNames = $ListToString(list,",")
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="Open">
<Description>
Open a class</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String,pClassName:%String,*pClass:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK, 
		pClass = ##class(%ZEN.proxyObject).%New()
	Try {
		$$$THROWONERROR(tSC, ##class(%Compiler.UDL.TextServices).GetTextAsStream(pNamespace, pClassName,.tStream))
		#dim tStream As %Stream.Character
		
        Set pClass.Source 	 = tStream.Read(tStream.Size)
        Set pClass.NameSpace = pNamespace
        Set pClass.Name 	 = pClassName
        
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="Create">
<Description>
look the class method name, it's suppose to CREATE a NEW CLASS</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String,pClass:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK,
		ns = $Namespace
	Try {
		Set $Namespace = pNamespace
	    Set newClass = ##class(%Dictionary.ClassDefinition).%New(pClass.Name)
	    Set newClass.Super 		 = pClass.Super
	    Set newClass.Abstract 	 = pClass.Abstract
	    Set newClass.Description = pClass.Description
	    $$$THROWONERROR(tSC, newClass.%Save())
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	
    Set $Namespace = ns

	Quit tSC
]]></Implementation>
</Method>

<Method name="Save">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String,pClass:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK,
		ns = $Namespace
		
	Try {
		
	    Set $Namespace = pNamespace
	    Set exists=##class(%Dictionary.ClassDefinition).%ExistsId(pClass.Name)
	    if ('exists){
	        Set nc = ##class(%Dictionary.ClassDefinition).%New(pClass.Name)
	        Set nc.Super = ""
	        Set nc.Abstract = ""
	        Set st = nc.%Save()
	    }
	    Set stream = ##class(%Stream.GlobalCharacter).%New()
	    Do stream.Write($ZConvert(pClass.Source,"I","UTF8"))
	    Do stream.Rewind()
	    $$$THROWONERROR(tSC, ##class(%Compiler.UDL.TextServices).SetTextFromStream(pNamespace, pClass.Name, stream))
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	
	Set $Namespace = ns
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="Compile">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String,pClass:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK,
		ns = $Namespace
	Try {
		Set:##class(%Dictionary.ClassDefinition).%ExistsId(pClass.Name)=0 tSC = $$$ERROR(5053,pClass.Name)
		Throw:$$$ISERR(tSC)
		
		Set pDelimiter = $Char(13,10)
		$$$THROWONERROR(tSC, ##class(%Compiler.UDL.TextServices).SetTextFromString(pNamespace, pClass.Name, pClass.Source, pDelimiter))
		$$$THROWONERROR(tSC, $system.OBJ.Compile(pClass.Name))
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	
	Set $Namespace = ns
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="Delete">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String,pClassName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK,
		ns = $Namespace
	Try {
    	Set $Namespace = pNamespace
    	$$$THROWONERROR(tSC, ##class(%Studio.ClassMgr).Delete(pClassName))
    
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	
	Set $Namespace = ns
	
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="COSmic.v1.app.namespace">
<IncludeCode>%sySystem</IncludeCode>
<TimeChanged>64267,33076.413542</TimeChanged>
<TimeCreated>64267,32189.479878</TimeCreated>

<Method name="ListAll">
<Description>
list all namespaces names</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pNamespaces:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK, namespaces = ""
	Try {
		Do List^%SYS.NAMESPACE(.tList)
		Set tNS=""
	    For  {
	        Set tNS=$Order(tList(tNS),1,tValue)
	        if tNS="" {quit}
	        Set $List(namespaces, * + 1) = """"_tNS_""""
	    }
	    Set pNamespaces = $ListToString(namespaces,",")
	    
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="All">
<Description>
get all namespaces names</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pNamespaces:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$THROWONERROR(tSC, ..ListAll(.namespaces))
		Set pNamespaces = "[" _ namespaces _"]"
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="Find">
<Description>
Find a namespace by name</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$THROWONERROR(tSC, ..ListAll(.nslist))
		Set namespaces = $ListFromString(nslist,",")
		Set:($ListFind(namespaces, """"_pNamespace_"""")=0) tSC = $$$ERROR(5015,pNamespace)
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="COSmic.v1.resource.Base">
<TimeChanged>64267,62105.715967</TimeChanged>
<TimeCreated>64267,62064.294889</TimeCreated>

<Method name="Error">
<Description>
Error message</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pSC:%Status</FormalSpec>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set json = ##class(%ZEN.proxyObject).%New(),
		json.status = 500,
		json.developerMessage = "Problems on Error method",
		json.userMessage = $System.Status.GetErrorText($$$ERROR(6084)),
		json.errorCode = 6084,
		json.moreInfo = "http://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=RERR_gen"

	Try {
		Set tSC = pSC,
			json.status = 400,
			json.developerMessage = $System.Status.GetErrorText(tSC),
			json.errorCode = $System.Status.GetErrorCodes(tSC),
			matcher=##class(%Regex.Matcher).%New("^ERRO\s#\d{4}\:\s", json.developerMessage),
			json.userMessage = matcher.ReplaceAll(""),
			%response.Status = "400 Bad Request"
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Set tSC = ""
	Do json.%ToJSON()
]]></Implementation>
</Method>

<Method name="NameSpaceExists">
<Description>
verify if the namespace exists</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$THROWONERROR(tSC, ##class(COSmic.v1.app.namespace).Find(pNamespace))
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="COSmic.v1.resource.Class">
<Super>COSmic.v1.resource.Base</Super>
<TimeChanged>64268,50138.437085</TimeChanged>
<TimeCreated>64267,62079.38144</TimeCreated>

<Method name="Validate">
<ClassMethod>1</ClassMethod>
<FormalSpec>pClass:%ZEN.proxyObject,pVerifyProperty:%Boolean=0</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set:pClass.Name="" tSC = $$$ERROR(5101)
		Set:((pVerifyProperty=1)&&(pClass.Source="")) tSC = $$$ERROR(5659,"Source")
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="Open">
<Description>
Method returns the class text</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNameSpace:%String,pClassName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK
	Try {
		$$$THROWONERROR(tSC, ..NameSpaceExists(pNameSpace))
		$$$THROWONERROR(tSC, ##class(COSmic.v1.app.class).Open(pNameSpace, pClassName, .json))
		Do json.%ToJSON()
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
		Do ..Error(tSC)		
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="List">
<Description>
 List all classes on a NameSpace </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Set sn = $Namespace
	Try {
		$$$THROWONERROR(tSC, ..NameSpaceExists(pNamespace))
		#dim req As %CSP.Request
	    $$$THROWONERROR(tSC, ##class(COSmic.v1.app.class).All(pNamespace, .classes))
	    Write "["_ classes _ "]"
	    
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
		Do ..Error(tSC)		
	}
    Set $Namespace = sn

    Quit tSC
]]></Implementation>
</Method>

<Method name="New">
<Description>
Create a New Class</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.pClass,1))
		$$$THROWONERROR(tSC, ..Validate(pClass))
		$$$THROWONERROR(tSC, ##class(COSmic.v1.app.class).Create(pNamespace, pClass))
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
		Do ..Error(tSC)
	}	
	Quit tSC
]]></Implementation>
</Method>

<Method name="Save">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNameSpace:%String,pClassName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.pClass,1))
		Set:pClass.Name="" pClass.Name = pClassName
		
		$$$THROWONERROR(tSC, ##class(COSmic.v1.app.class).Save(pNameSpace, pClass))
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
		Do ..Error(tSC)
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="Kill">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNameSpace:%String,pClassName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$THROWONERROR(tSC, ##class(COSmic.v1.app.class).Delete(pNameSpace, pClassName))
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
		Do ..Error(tSC)
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="Compile">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNameSpace:%String,pClassName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.pClass,1))
		Set:pClass.Name="" pClass.Name = pClassName
		
		$$$THROWONERROR(tSC, ..Validate(pClass, $$$YES))
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
		Do ..Error(tSC)
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="COSmic.v1.resource.Namespace">
<TimeChanged>64268,30231.335696</TimeChanged>
<TimeCreated>64195,50003.020022</TimeCreated>

<Method name="List">
<Description>
get all namespaces names</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSC = $$$OK
	Try {
		$$$THROWONERROR(tSC, ##class(COSmic.v1.app.namespace).All(.Namespaces))
		Write Namespaces
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="COSmic.v1.settings.theme">
<TimeChanged>64267,48120.378606</TimeChanged>
<TimeCreated>64267,48120.378606</TimeCreated>
</Class>


<Class name="COSmic.v1.utl.SQLBuilder">
<Super>%RegisteredObject</Super>
<TimeChanged>64267,36423.564387</TimeChanged>
<TimeCreated>64174,51856.58627</TimeCreated>

<Property name="Select">
<Type>%String</Type>
<Internal>1</Internal>
<InitialExpression>"*"</InitialExpression>
</Property>

<Property name="From">
<Type>%String</Type>
<Internal>1</Internal>
</Property>

<Property name="Where">
<Type>%String</Type>
<Internal>1</Internal>
</Property>

<Property name="GroupBy">
<Type>%String</Type>
<Internal>1</Internal>
</Property>

<Property name="OrderBy">
<Type>%String</Type>
<Internal>1</Internal>
</Property>

<Property name="Statement">
<Type>%Integer</Type>
<Internal>1</Internal>
<InitialExpression>1</InitialExpression>
<Parameter name="DISPLAYLIST" value=",Select,Update,Delete"/>
<Parameter name="VALUELIST" value=",1,2,3"/>
</Property>

<Method name="Delete">
<FormalSpec>params:%String=""</FormalSpec>
<ReturnType>COSmic.v1.utl.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set ..Select = ""
	Set ..Statement = 3
	Quit $This
]]></Implementation>
</Method>

<Method name="Select">
<FormalSpec>params:%String=""</FormalSpec>
<ReturnType>COSmic.v1.utl.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	If params'="" {
		Set matcher = ##class(%Regex.Matcher).%New("^(SELECT)\s")
		Set matcher.Text = $ZConvert(params,"U")
		Set:matcher.Locate()=1 params = $Extract(params,8,*+1)
		
		Set auxList = $ListFromString(params,",")
		Set select = ""
		For k=1:1:$ListLength(auxList) {
			Set:$List(auxList,k)'="" $List(select,*+1) = $List(auxList,k)
		}
		Set ..Select = $ListToString(select,",")
	}
	Quit $This
]]></Implementation>
</Method>

<Method name="From">
<FormalSpec>pFrom:%String</FormalSpec>
<ReturnType>COSmic.v1.utl.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set ..From = pFrom
	Quit $This
]]></Implementation>
</Method>

<Method name="Where">
<FormalSpec>args...</FormalSpec>
<ReturnType>COSmic.v1.utl.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set result = ..GetStringPrepare(args...)
	Quit:result="" $This
	Quit ..WhereInterno(result)
]]></Implementation>
</Method>

<Method name="WhereInterno">
<Internal>1</Internal>
<FormalSpec>pWhere:%String,pAndOr=0</FormalSpec>
<Private>1</Private>
<ReturnType>COSmic.v1.utl.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	If ..Where=""{
		Set ..Where = pWhere
	} Else {
		Set:..Where'="" ..Where = ..Where _ $Case(pAndOr,0:" AND ",1:" OR ") _ pWhere
	}
	Quit $This
]]></Implementation>
</Method>

<Method name="Or">
<FormalSpec>args...</FormalSpec>
<ReturnType>COSmic.v1.utl.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set result = ..GetStringPrepare(args...)
	Quit:result="" $This
	Quit ..WhereInterno(result,1)
]]></Implementation>
</Method>

<Method name="And">
<FormalSpec>args...</FormalSpec>
<ReturnType>COSmic.v1.utl.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set result = ..GetStringPrepare(args...)
	Quit:result="" $This
	Quit ..WhereInterno(result)
]]></Implementation>
</Method>

<Method name="Between">
<FormalSpec>pProp,pInferior,pSuperior,pType=0</FormalSpec>
<ReturnType>COSmic.v1.utl.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set sql = "(" _ pProp _ " BETWEEN " _ pInferior _ " AND " _ pSuperior _ ")"
	Quit ..WhereInterno(sql)
]]></Implementation>
</Method>

<Method name="GetStringPrepare">
<ClassMethod>1</ClassMethod>
<FormalSpec>args...</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set output = ""
	Try {
		Set output = $Get(args(1))
		Set count = $Order(args(""),-1)
		
		Set matcher = ##class(%Regex.Matcher).%New("\?")
		Set matcher.Text = output
		
		If count > 1 {
			Set k = 2, sanitize = "'"
			
			Set:$Find($ZConvert(output,"U"),"LIKE")>0 sanitize = "#"
			
			While matcher.Locate() {
				Set matcher.Text = matcher.ReplaceFirst(sanitize_$Replace($Get(args(k)),"'","")_sanitize)
		        Set k = $Increment(k)
		    }
		    
		    Set output = matcher.Text
		    Set:$Find(output,"''")>0 output = ""
		    Set:$Find(output,"##")>0 output = ""
		    Set:output'="" output = $Replace(output,"#","")
		} Else {
			Set:matcher.Match(output) output = ""
		}
	} Catch {
		Set output = ""
	}
	Quit output
]]></Implementation>
</Method>

<Method name="Order">
<FormalSpec>pOrderBy:%String</FormalSpec>
<ReturnType>COSmic.v1.utl.SQLBuilder</ReturnType>
<Implementation><![CDATA[	Quit ..OrderBy(pOrderBy)
]]></Implementation>
</Method>

<Method name="OrderBy">
<FormalSpec>pOrderBy:%String</FormalSpec>
<ReturnType>COSmic.v1.utl.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set:..OrderBy'="" ..OrderBy = ..OrderBy _ "," _ pOrderBy
	Set:..OrderBy="" ..OrderBy = pOrderBy
	Quit $This
]]></Implementation>
</Method>

<Method name="GroupBy">
<FormalSpec>pGroupBy:%String</FormalSpec>
<ReturnType>COSmic.v1.utl.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set:..GroupBy'="" ..GroupBy = ..GroupBy _ "," _ pGroupBy
	Set:..GroupBy="" ..GroupBy = pGroupBy
	Quit $This
]]></Implementation>
</Method>

<Method name="If">
<FormalSpec>pFuncao,args...</FormalSpec>
<ReturnType>COSmic.v1.utl.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Do $Method($This,pFuncao,args...)
	Quit $This
]]></Implementation>
</Method>

<Method name="EntreDatas">
<Description>
Condição para funcionar este método é as datas parametros estar no formato 3.</Description>
<FormalSpec>pInicio,pFinal,pCampoDt</FormalSpec>
<ReturnType>COSmic.v1.utl.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	If (pInicio'="") && (pFinal'="") {
		Set ..Where = ..Between(pCampoDt,$ZD($ZDH(pInicio,3),4),$ZD($ZDH(pFinal,3),4))
	}
	ElseIf (pInicio'="") && (pFinal="") {
		Set ..Where = ..Between(pCampoDt,($ZDate($ZDateH(pInicio,3),4) _" 00:00:00'"), ($ZDate($Horolog,4) _ " 23:59:59'")) 
	}
	ElseIf (pInicio="") && (pFinal'="") {
		Set ..Where = ..Between(pCampoDt,"'01/01/1950 00:00:00'",($ZDate($ZDateH(pFinal,3),4) _" 23:59:59'"))
	}
	Quit $This
]]></Implementation>
</Method>

<Method name="SubSelect">
<FormalSpec>pSelect,Alias=""</FormalSpec>
<ReturnType>COSmic.v1.utl.SQLBuilder</ReturnType>
</Method>

<Method name="GetSQL">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Quit:..Statement=1 ..GetSelectStatement()
	Quit:..Statement=3 ..GetDeleteStatement()
]]></Implementation>
</Method>

<Method name="GetSelectStatement">
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set sql = "Select " _ ..Select
	Set sql = sql _ " From " _ ..From
	Set:..Where'="" sql = sql _ " Where " _ ..Where
	Set:..GroupBy'="" sql = sql _ " Group By " _ ..GroupBy
	Set:..OrderBy'="" sql = sql _ " Order By " _ ..OrderBy
	Quit sql
]]></Implementation>
</Method>

<Method name="GetDeleteStatement">
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set sql = "Delete "
	Set sql = sql _ " From " _ ..From
	Set:..Where'="" sql = sql _ " Where " _ ..Where
	Quit sql
]]></Implementation>
</Method>

<Method name="Execute">
<FormalSpec>*tSC:%Status,Args...</FormalSpec>
<ReturnType>%SQL.StatementResult</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set statement = ##class(%SQL.Statement).%New()
		Set tSC = statement.%Prepare(..GetSQL())
		Set tRS = statement.%Execute(Args...)
	}
	Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tRS
]]></Implementation>
</Method>
</Class>


<Class name="COSmic.web.Broker">
<Super>%CSP.REST</Super>
<TimeChanged>64268,58343.235942</TimeChanged>
<TimeCreated>64195,49931.725059</TimeCreated>

<Parameter name="HandleCorsRequest">
<Default>1</Default>
</Parameter>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
    <Route Url="/v1/namespaces" Method="GET" Call="COSmic.v1.resource.Namespace:List" />
    
    <Route Url="/v1/:namespace/class" Method="GET" Call="COSmic.v1.resource.Class:List" />
    <Route Url="/v1/:namespace/class" Method="POST" Call="COSmic.v1.resource.Class:New" />
    <Route Url="/v1/:namespace/class/:classname" Method="DELETE" Call="COSmic.v1.resource.Class:Kill" />
    <Route Url="/v1/:namespace/class/:classname" Method="GET" Call="COSmic.v1.resource.Class:Open" />
    <Route Url="/v1/:namespace/class/:classname" Method="PUT" Call="COSmic.v1.resource.Class:Save" />
	<Route Url="/v1/:namespace/class/:classname" Method="POST" Call="COSmic.v1.resource.Class:Compile" />
	
    <Route Url="/v1/:namespace/class/:classname/method" Method="POST" Call="COSmic.v1.app.Studio:CreateMethod" />
    <Route Url="/v1/:namespace/class/:classname/property" Method="POST" Call="COSmic.v1.app.Studio:CreateProperty" />
    <Route Url="/v1/:namespace/class/:classname/parameter" Method="GET" Call="COSmic.v1.app.Studio:GetParameters"/>
	
    <Route Url="/v1/info" Method="GET" Call="COSmic.info.swagger:v1"/>
    <Route Url="/test" Method="GET" Call="COSmic.web.Broker:Test"/>
        
</Routes>
]]></Data>
</XData>

<Method name="Test">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   write !,"connect with COSmic Broker is Ok!"
   quit $$$OK
]]></Implementation>
</Method>
</Class>


<Routine name="Form" type="INC" timestamp="64135,60843"><![CDATA[
#define formGlobal ^form.forms
#define settingsGlobal ^form.settings
#define formNameParam "FORMNAME"
#define displayProp "DISPLAYPROPERTY"
#define propDisplayNameParam "DISPLAYNAME"
#define orderByParam "FORMORDERBY"
#define objPermParam "OBJPERMISSIONS"
#define metadata "metadata"


#define forAll(%in,%gn) s gn%in=$na(%gn) s %in="" f { s %in=$o(@gn%in@(%in)) q:%in=""
#define forAllk(%in,%kn,%gn) s gn%in=$na(%gn) s %in="" f %kn=1:1 { s %in=$o(@gn%in@(%in)) q:%in=""
#define endFor  }


#define formatJSON 		"aeloqtwc"
#define formatJSONSQL	"tw"
#define formatDate		3
#define formatTime		7

#define toJSONClassMethod "toJSON"
#define updateClassMethod "updateIdFromObject"

#define skipClasses ",Form.OnCompileGenerators,Form.Adaptor,"
#define fileClass "Form.File"
#define propClass "Form.Field"
#define fileDir $g($$$settingsGlobal("fileDir"), ##class(%Library.File).GetDirectory())

#define ClassSQLTable(%c)    ($$$comClassKeyGet(%c,$$$cCLASSsqlschemaname)_"."_$$$comClassKeyGet(%c,$$$cCLASSsqltablename))

#; Get a Class Parameter from a class
#; #define GetClassParameter(%cls,%parm) $$$comMemberKeyGet(%cls,$$$cCLASSparameter,%parm,$$$cPARAMdefault)
#; #define GetPropertyParameter(%cls,%prop,%parm) $$$comMemberArrayGet(%cls,$$$cCLASSproperty,%prop,$$$cPROPparameter,%parm)


#define get(%name) $get(%request.Data(%name,1))
#define webContext $$$isDefObject(%request)
#define debug (($$$webContext) && ($d(%request.Data("Debug"))))
#define r(%property) %request.Content.##Expression(%property)
#define public ((%request.GetCgiEnv("SERVER_PORT") = 80) || (%request.GetCgiEnv("SERVER_PORT") = 443))
#define private '$$$public

#; Test if object variable is defined and not Null
#define isDefObject(%obj) ($Data(%obj)#2&&$IsObject(%obj))
]]></Routine>


<Routine name="Utils" type="INC" timestamp="64188,34044"><![CDATA[
#Define Pool ^Community.Pool 
]]></Routine>


<Project name="cosmic_backend" LastModified="2016-12-16 17:24:54.997924">
  <Items>
    <ProjectItem name="%ZLANGC00.MAC" type="MAC"></ProjectItem>
    <ProjectItem name="%ZSTART.MAC" type="MAC"></ProjectItem>
    <ProjectItem name="COSmic" type="PKG"></ProjectItem>
    <ProjectItem name="Form.INC" type="MAC"></ProjectItem>
    <ProjectItem name="Utils.INC" type="MAC"></ProjectItem>
  </Items>
</Project>
</Export>
